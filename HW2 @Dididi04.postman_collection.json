{
	"info": {
		"_postman_id": "ce3df351-9036-4840-a008-2e54d55c4253",
		"name": "HW2 @Dididi04",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
							"    console.log(response.json());",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first?name=d",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp_JSON = pm.response.json ();",
							"pm.environment.set(\"token\", resp_JSON.token);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "ldfbdf",
							"type": "text"
						},
						{
							"key": "password",
							"value": "28dfvdfv",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"console.log(pm.response.status);",
							"",
							"//3. Спарсить response body в json.              ",
							"var jsonData = pm.response.json();",
							"console.log(jsonData);",
							"console.log(pm.response.json());",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Your test name\", function () {",
							"   pm.expect(jsonData.name).to.eql(\"Diyora\");",
							"});",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Your test age\", function () {",
							"   pm.expect(jsonData.age).to.eql('28');",
							"});",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Your test salary\", function () {",
							"   pm.expect(jsonData.salary).to.eql(45);",
							"});",
							"//7. Спарсить request.    ",
							"pm. request.url.query.get(\"salary\");",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.) ",
							"var resp_name = jsonData.name;",
							"var resp_salary = jsonData.salary;",
							"var resp_age = jsonData.age;",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"console.log(resp_name);",
							"console.log(resp_salary);",
							"console.log(resp_age);",
							"",
							"",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"var resp_family = jsonData.family;",
							"console.log(resp_family);  ",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"    pm.test(\"Your salary equal\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary * 4);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Diyora",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "45",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.              ",
							" jsonData = pm.response.json ();",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Your test name\", function () {",
							"   pm.expect(jsonData.name).to.eql(\"Diyora\");",
							"});",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Test name\", function () {",
							"pm.expect(jsonData.name).to.eql(\"Diyora\");",
							"})",
							"console.log(\"name\" + \" \" + jsonData.name);",
							"//6",
							"pm.test(\"Test age\", function () {",
							"pm.expect(jsonData.age).to.eql(\"28\");",
							"})",
							"console.log(\"age\" + \" \" + jsonData.age);",
							"//7",
							"pm.test(\"Test salary\", function () {",
							"pm.expect(jsonData.salary).to.eql(50);",
							"})",
							"console.log(\"salary\" + \" \" + jsonData.salary);",
							"//8. Вывести в консоль параметр family из response.",
							"var resp_family = jsonData.family;",
							"console.log(resp_family); ",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Test dog has a name\", function () {",
							"pm.expect(jsonData.family.pets.dog).hasOwnProperty('name'); ",
							"})",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Test dog age\", function () {",
							"pm.expect(jsonData.family.pets.dog).hasOwnProperty(age = 4); ",
							"})",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							" pm.test(\"Your dog name\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"//12. Проверить, что параметр age имеет значение 4.",
							" pm.test(\"Your dog age 4\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});",
							"   ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Diyora&age=28&salary=50",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Diyora"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response_JSON = pm.response.json ();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Test name\", function () {",
							"pm.expect(response_JSON.name).to.eql(\"Diyora\");",
							"})",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Test age\", function () {",
							"pm.expect(response_JSON.age).to.eql(28);",
							"})",
							"//7. Вывести в консоль параметр salary из request.",
							"//не получается",
							"//8. Вывести в консоль параметр salary из response.",
							"console.log(response_JSON.salary); ",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(response_JSON.salary[0]); ",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(response_JSON.salary[1]); ",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(response_JSON.salary[2]); ",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Test 0 salary\", function () {",
							"pm.expect(response_JSON.salary[0]).to.eql(50);",
							"})",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Test 1 salary\", function () {",
							"pm.expect(response_JSON.salary[1] * 2);",
							"})",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Test 2 salary\", function () {",
							"pm.expect(response_JSON.salary[2] * 3);",
							"})",
							"//15. Создать в окружении переменную name",
							"pm.environment.set(\"name\", response_JSON.name);",
							"//16. Создать в окружении переменную age",
							"pm.environment.set(\"age\", response_JSON.age);",
							"//17. Создать в окружении переменную salary",
							"pm.environment.set(\"salary\", response_JSON.salary);",
							"//18. Передать в окружение ремённую переменную name",
							"//19. Передать в окружение ремённую переменную age",
							"//20. Передать в окружение ремённую переменную salary",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"console.log(response_JSON.salary); ",
							"console.log(response_JSON);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Diyora&age=28&salary=50",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Diyora"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user info 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request",
							"pm.environment.get(\"salary\");",
							"//2. Вставить параметр age из окружения в age",
							"pm.environment.get(\"age\");",
							"//3. Вставить параметр name из окружения в name",
							"pm.environment.get(\"name\");",
							"//4. Отправить запрос.",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
							"    console.log(response.json());",
							"});",
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//6. Спарсить response body в json.",
							" jsonData = pm.response.json();",
							"",
							"//7. Спарсить request.",
							"var req = JSON.parse;",
							"var reqData = pm.request.url.query.get(\"name\");",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Body matches start qa salary\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");",
							"});",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Body matches salary  after_6_months\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");",
							"});",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Body matches salary after_12_months\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");",
							"});",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Body matches salary after 1.5 years\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");",
							"});",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Body matches salary after 3.5 years\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");",
							"});",
							"//13. Проверить, что json response имеет параметр person",
							"pm.test(\"Body matches Person\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"person\");",
							"});",
							"",
							"///14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"   pm.test(\"Your salary 6 month * 2\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary * 2)});",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Your salary 12 month\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary * 2.7)});",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Your salary 1.5 year\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(jsonData.start_qa_salary * 3.3) });",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Your salary 3.5 years\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(jsonData.start_qa_salary * 3.8)});",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Uname salary 1\", function () {",
							"pm.expect(jsonData.person.u_name[1]).to.eql (jsonData.start_qa_salary)});",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"var reqData = pm.request.url.query.get(\"age\");",
							"pm.test(\"Uname salary 1\", function () {",
							"pm.expect(jsonData.u_age).to.eql (reqData)});",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"salary 5 year * 4.2\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(jsonData.start_qa_salary * 4.2);",
							"});",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person",
							"console.log(jsonData.person);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Diyora",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "45",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72:5005"
		}
	]
}